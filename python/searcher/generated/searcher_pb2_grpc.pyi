"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import bundle_pb2
import collections.abc
import grpc
import searcher_pb2

class SearcherServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    SubscribeBundleResults: grpc.UnaryStreamMultiCallable[
        searcher_pb2.SubscribeBundleResultsRequest,
        bundle_pb2.BundleResult,
    ]
    """Searchers can invoke this endpoint to subscribe to their respective bundle results.
    A success result would indicate the bundle won its state auction and was submitted to the validator.
    """
    SubscribePendingTransactions: grpc.UnaryStreamMultiCallable[
        searcher_pb2.PendingTxSubscriptionRequest,
        searcher_pb2.PendingTxNotification,
    ]
    """RPC endpoint to subscribe to pending transactions. Clients can provide a list of base58 encoded accounts.
    Any transactions that write-lock the provided accounts will be streamed to the searcher.
    """
    SendBundle: grpc.UnaryUnaryMultiCallable[
        searcher_pb2.SendBundleRequest,
        searcher_pb2.SendBundleResponse,
    ]
    GetNextScheduledLeader: grpc.UnaryUnaryMultiCallable[
        searcher_pb2.NextScheduledLeaderRequest,
        searcher_pb2.NextScheduledLeaderResponse,
    ]
    """Returns the next scheduled leader connected to the block engine."""
    GetConnectedLeaders: grpc.UnaryUnaryMultiCallable[
        searcher_pb2.ConnectedLeadersRequest,
        searcher_pb2.ConnectedLeadersResponse,
    ]
    """Returns information on connected leader slots"""
    GetTipAccounts: grpc.UnaryUnaryMultiCallable[
        searcher_pb2.GetTipAccountsRequest,
        searcher_pb2.GetTipAccountsResponse,
    ]
    """Returns the tip accounts searchers shall transfer funds to for the leader to claim."""

class SearcherServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def SubscribeBundleResults(
        self,
        request: searcher_pb2.SubscribeBundleResultsRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[bundle_pb2.BundleResult]:
        """Searchers can invoke this endpoint to subscribe to their respective bundle results.
        A success result would indicate the bundle won its state auction and was submitted to the validator.
        """
    @abc.abstractmethod
    def SubscribePendingTransactions(
        self,
        request: searcher_pb2.PendingTxSubscriptionRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[searcher_pb2.PendingTxNotification]:
        """RPC endpoint to subscribe to pending transactions. Clients can provide a list of base58 encoded accounts.
        Any transactions that write-lock the provided accounts will be streamed to the searcher.
        """
    @abc.abstractmethod
    def SendBundle(
        self,
        request: searcher_pb2.SendBundleRequest,
        context: grpc.ServicerContext,
    ) -> searcher_pb2.SendBundleResponse: ...
    @abc.abstractmethod
    def GetNextScheduledLeader(
        self,
        request: searcher_pb2.NextScheduledLeaderRequest,
        context: grpc.ServicerContext,
    ) -> searcher_pb2.NextScheduledLeaderResponse:
        """Returns the next scheduled leader connected to the block engine."""
    @abc.abstractmethod
    def GetConnectedLeaders(
        self,
        request: searcher_pb2.ConnectedLeadersRequest,
        context: grpc.ServicerContext,
    ) -> searcher_pb2.ConnectedLeadersResponse:
        """Returns information on connected leader slots"""
    @abc.abstractmethod
    def GetTipAccounts(
        self,
        request: searcher_pb2.GetTipAccountsRequest,
        context: grpc.ServicerContext,
    ) -> searcher_pb2.GetTipAccountsResponse:
        """Returns the tip accounts searchers shall transfer funds to for the leader to claim."""

def add_SearcherServiceServicer_to_server(servicer: SearcherServiceServicer, server: grpc.Server) -> None: ...
